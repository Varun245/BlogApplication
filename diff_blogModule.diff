diff --git a/module/Blog/Module.php b/module/Blog/Module.php
index 81196c7..7059cc0 100644
--- a/module/Blog/Module.php
+++ b/module/Blog/Module.php
@@ -2,20 +2,23 @@
 
 namespace Blog;
 
-
 use Zend\ModuleManager\Feature\AutoloaderProviderInterface;
 use Zend\ModuleManager\Feature\ConfigProviderInterface;
-use Blog\Services\A;
 
 class Module implements AutoloaderProviderInterface, ConfigProviderInterface
 {
     public function getConfig()
     {
+
         return include __DIR__ . '/config/module.config.php';
     }
 
+    /**
+     * @return array
+     */
     public function getAutoloaderConfig()
     {
+        
         return array(
             'Zend\Loader\ClassMapAutoloader' => array(
                 __DIR__ . '/autoload_classmap.php',
@@ -28,3 +31,4 @@ class Module implements AutoloaderProviderInterface, ConfigProviderInterface
         );
     }
 }
+
diff --git a/module/Blog/config/module.config.php b/module/Blog/config/module.config.php
index 8d8a352..ecc9feb 100644
--- a/module/Blog/config/module.config.php
+++ b/module/Blog/config/module.config.php
@@ -3,40 +3,38 @@
 return array(
     'controllers' => array(
         'factories' => array(
-            'Blog\Controller\Blog' => 'Blog\Factories\ControllerFactory',   
+            'Blog\Controller\Blog' => 'Blog\Factories\ControllerFactory',
         ),
     ),
 
-
     'router' => array(
         'routes' => array(
             'blog' => array(
-                'type'    => 'segment',
+                'type'    => 'literal',
                 'options' => array(
-                    'route'    => '/blog[/:action][/:id]',
-                    'constraints' => array(
-                        'action' => '[a-zA-Z][a-zA-Z0-9_-]*',
-                        'id'     => '[0-9]+',
-                    ),
+                    'route'    => '/blog',
                     'defaults' => array(
                         'controller' => 'Blog\Controller\Blog',
                         'action'     => 'index',
                     ),
-                ),  
-            ),
-            'new'=>array(
-                'type'    => 'segment',
-                'options' => array(
-                    'route'    => '/new[/:action][/:id]',
-                    'constraints' => array(
-                        'action' => '[a-zA-Z][a-zA-Z0-9_-]*',
-                        'id'     => '[0-9]+',
-                    ),
-                    'defaults' => array(
-                        'controller' => 'Blog\Controller\New',
-                        'action'     => 'index1',
-                    ),
                 ),
+
+                'may_terminate' => true,
+                'child_routes' => array(
+                    'default' => array(
+                        'type' => 'segment',
+                        'options' => array(
+                            'route' => '[/:action][/:id]',
+                            'constraints' => array(
+                                'action' => '[a-zA-Z][a-zA-Z0-9_-]*'
+                            ),
+                            'defaults' => array(
+                                'controller' => 'Blog\Controller\Blog',
+                                'action' => 'display',
+                            )
+                        )
+                    )
+                )
             ),
         ),
     ),
@@ -44,12 +42,8 @@ return array(
     'service_manager' => [
         'factories' => array(
             'Blog\Services\BlogService' => 'Blog\Factories\BlogServiceFactory',
-            'Blog\Repositories\BlogRepository'=>'Blog\Factories\EntityManagerFactory'
+            'Blog\Repositories\BlogRepository' => 'Blog\Factories\BlogRepositoryFactory'
         ),
-
-        'invokables'=>[
-            'Blog\Services\NewService'=>'Blog\Services\NewService',
-        ],
     ],
 
     'view_manager' => array(
diff --git a/module/Blog/src/Blog/Controller/BlogController.php b/module/Blog/src/Blog/Controller/BlogController.php
index 6ec7594..bd2f500 100644
--- a/module/Blog/src/Blog/Controller/BlogController.php
+++ b/module/Blog/src/Blog/Controller/BlogController.php
@@ -1,4 +1,5 @@
 <?php
+declare (strict_types=1);
 
 namespace Blog\Controller;
 
@@ -8,18 +9,28 @@ use Blog\Form\BlogForm;
 use Blog\Entity\Blog;
 use Blog\Contracts\BlogServiceInterface;
 
+/**
+ * Class BlogController
+ * @package Blog\Controller
+ */
 class BlogController extends AbstractActionController
 {
-
-    protected $em;
     protected $blogService;
 
+    protected $authenticationService;
+
+    /**
+     * BlogController constructor.
+     * @param BlogServiceInterface $blogService
+     */
     public function __construct(BlogServiceInterface $blogService)
     {
         $this->blogService = $blogService;
     }
 
-
+    /**
+     * @return ViewModel
+     */
     public function indexAction()
     {
         $blogs = $this->blogService->findAllBlogs();
@@ -29,9 +40,11 @@ class BlogController extends AbstractActionController
         ]);
     }
 
+    /**
+     * @return array|\Zend\Http\Response
+     */
     public function  addAction()
     {
-
         $form = new BlogForm();
 
         $form->get('submit')->setValue('Create');
@@ -48,19 +61,21 @@ class BlogController extends AbstractActionController
             if ($form->isValid()) {
                 $blog->exchangeArray($form->getData());
                 $this->blogService->add($blog);
+
                 return $this->redirect()->toRoute('blog');
             }
         }
 
         return [
-
             'form' => $form
         ];
     }
 
+    /**
+     * @return array|\Zend\Http\Response
+     */
     public function editAction()
     {
-
         $id = (int)$this->params()->fromRoute('id', 0);
         if (!$id) {
             return $this->redirect()->toRoute('blog', array(
@@ -74,7 +89,6 @@ class BlogController extends AbstractActionController
         $form->bind($blog);
         $form->get('submit')->setAttribute('value', 'Edit');
 
-
         $request = $this->getRequest();
         if ($request->isPost()) {
             $form->setInputFilter($blog->getInputFilter());
@@ -82,27 +96,46 @@ class BlogController extends AbstractActionController
 
             if ($form->isValid()) {
                 $this->blogService->edit();
+
                 return $this->redirect()->toRoute('blog');
             }
         }
 
-        return array(
+        return [
             'id' => $id,
             'form' => $form,
-        );
+        ];
     }
 
+    /**
+     * @return array|\Zend\Http\Response
+     */
     public function deleteAction()
     {
-        $id = $this->params()->fromRoute('id', 0);
+        $id = (int)$this->params()->fromRoute('id', 0);
+
+        if (!$id) {
+
+            return $this->redirect()->toRoute('blog');
+        }
 
         $blog = $this->blogService->findById($id);
 
-        if ($blog) {
+        $request = $this->getRequest();
 
-            $this->blogService->delete($blog);
+        if ($request->isPost()) {
+            $del = $request->getPost('del');
+            if ($del == 'Yes') {
+                $this->blogService->delete($blog);
+            }
 
             return $this->redirect()->toRoute('blog');
         }
+
+        return array(
+            'id'    => $id,
+            'blog' => $blog
+        );
     }
 }
+
diff --git a/module/Blog/src/Blog/Controller/NewController.php b/module/Blog/src/Blog/Controller/NewController.php
deleted file mode 100644
index 8d73756..0000000
--- a/module/Blog/src/Blog/Controller/NewController.php
+++ /dev/null
@@ -1,18 +0,0 @@
-<?php
-
-
-namespace Blog\Controller;
-
-use Zend\Mvc\Controller\AbstractActionController;
-use Zend\View\Helper\ViewModel;
-
-class NewController extends AbstractActionController{
-
-
-    public function index1Action()
-    {
-       $blogs='Hello'; 
-      return new ViewModel(['blogs'=>$blogs]);
-    }
-
-}
\ No newline at end of file
diff --git a/module/Blog/src/Blog/Entity/Blog.php b/module/Blog/src/Blog/Entity/Blog.php
index ad0c910..2f6e3b5 100644
--- a/module/Blog/src/Blog/Entity/Blog.php
+++ b/module/Blog/src/Blog/Entity/Blog.php
@@ -1,4 +1,5 @@
 <?php
+declare(Strict_types=1);
 
 namespace Blog\Entity;
 
@@ -7,11 +8,9 @@ use Zend\InputFilter\InputFilter;
 use Zend\InputFilter\InputFilterAwareInterface;
 use Zend\InputFilter\InputFilterInterface;
 
-
 /** @ORM\Entity */
 class Blog implements InputFilterAwareInterface
 {
-
     /**
      * @ORM\Id
      * @ORM\GeneratedValue(strategy="AUTO")
@@ -24,49 +23,65 @@ class Blog implements InputFilterAwareInterface
 
     /** @ORM\Column(type="text") */
     protected $description;
-
+    
+    /**
+     * @var
+     */
     protected $inputFilter;
 
-
-    public function getId()
+    /**
+     * @return mixed
+     */
+    public function getId(): int
     {
         return $this->id;
     }
 
-    public function setTitle($title)
+    /**
+     * @param String $title
+     */
+    public function setTitle(string $title)
     {
         $this->title = $title;
     }
 
     /**
-     * @return mixed
+     * @return String
      */
-    public function getTitle()
+    public function getTitle(): string
     {
         return $this->title;
     }
 
     /**
-     * @return mixed
+     * @return String
      */
-    public function getDescription()
+    public function getDescription(): string
     {
         return $this->description;
     }
 
     /**
-     * @param mixed $description
+     * @param $description
+     * @return string
      */
-    public function setDescription($description)
+    public function setDescription(string $description)
     {
         $this->description = $description;
     }
 
+    /**
+     * @return array
+     */
     public function getArrayCopy() 
     {
         return get_object_vars($this);
     }
 
+    /**
+     * @param InputFilterInterface $inputFilter
+     * @return void|InputFilterAwareInterface
+     */
     public function setInputFilter(InputFilterInterface $inputFilter)
     {
         throw new Exception('Not Used');
@@ -102,10 +117,6 @@ class Blog implements InputFilterAwareInterface
                             'min' => 1 ,
                             'max' => 100,
                         ),
-                        'messages'=>[
-                            
-                            
-                        ]
                     ),
                 ),
             ));
@@ -135,6 +146,9 @@ class Blog implements InputFilterAwareInterface
         return $this->inputFilter;
     }
 
+    /**
+     * @param $data
+     */
     public function exchangeArray($data)
     {
         $this->id = $data['id'] ;
@@ -142,3 +156,4 @@ class Blog implements InputFilterAwareInterface
         $this->description  = $data['description'] ;
     }
 }
+
diff --git a/module/Blog/src/Contracts/BlogServiceInterface.php b/module/Blog/src/Contracts/BlogServiceInterface.php
index b15ee38..704df3b 100644
--- a/module/Blog/src/Contracts/BlogServiceInterface.php
+++ b/module/Blog/src/Contracts/BlogServiceInterface.php
@@ -1,17 +1,52 @@
 <?php
+declare(strict_types=1);
 
 namespace Blog\Contracts;
 
+use Blog\Entity\Blog;
+
+/**
+ * Interface BlogServiceInterface
+ * @package Blog\Contracts
+ */
 interface BlogServiceInterface
 {
+    /**
+     * Show all blogs 
+     * 
+     * @return array
+     */
+    public function findAllBlogs(): array;
 
-    public function findAllBlogs();
-
-    public function add($blog);
+    /**
+     * Adding a new Blog
+     * 
+     * @param Blog $blog
+     * @return mixed
+     */
+    public function add(Blog $blog);
 
+    /**
+     * Edit the Blog 
+     * 
+     * @return mixed
+     */
     public function edit();
 
-    public function delete($blog);
+    /**
+     * For Deleting a blog
+     * 
+     * @param Blog $blog
+     * @return mixed
+     */
+    public function delete(Blog $blog);
 
-    public function findById($id);
+    /**
+     * Finding the blog by id
+     * 
+     * @param $id
+     * @return Blog
+     */
+    public function findById(int $id): Blog;
 }
+
diff --git a/module/Blog/src/Factories/BlogRepositoryFactory.php b/module/Blog/src/Factories/BlogRepositoryFactory.php
index 5e39951..cff1974 100644
--- a/module/Blog/src/Factories/BlogRepositoryFactory.php
+++ b/module/Blog/src/Factories/BlogRepositoryFactory.php
@@ -1,4 +1,5 @@
 <?php
+declare(strict_types=1);
 
 namespace Blog\Factories;
 
diff --git a/module/Blog/src/Factories/BlogServiceFactory.php b/module/Blog/src/Factories/BlogServiceFactory.php
index 89ac9f8..84a4771 100644
--- a/module/Blog/src/Factories/BlogServiceFactory.php
+++ b/module/Blog/src/Factories/BlogServiceFactory.php
@@ -1,4 +1,5 @@
 <?php
+declare(strict_types=1);
 
 namespace Blog\Factories;
 
@@ -7,11 +8,21 @@ use Zend\ServiceManager\ServiceLocatorInterface;
 use Blog\Services\BlogService;
 use Blog\Repositories\BlogRepository;
 
+/**
+ * Class BlogServiceFactory
+ * @package Blog\Factories
+ */
 class BlogServiceFactory implements FactoryInterface
 {
+    /**
+     * @param ServiceLocatorInterface $serviceLocator
+     * @return BlogService|mixed
+     */
     public function createService(ServiceLocatorInterface $serviceLocator)
     {
-       $blogRepo=$serviceLocator->get('Blog\Repositories\BlogRepository');
-       return new BlogService($blogRepo);
+        $blogRepository = $serviceLocator->get(BlogRepository::class);
+
+        return new BlogService($blogRepository);
     }
-}   
\ No newline at end of file
+}
+
diff --git a/module/Blog/src/Factories/ControllerFactory.php b/module/Blog/src/Factories/ControllerFactory.php
index ac655a6..f821b52 100644
--- a/module/Blog/src/Factories/ControllerFactory.php
+++ b/module/Blog/src/Factories/ControllerFactory.php
@@ -1,20 +1,29 @@
 <?php
-
+declare(strict_types=1);
 
 namespace Blog\Factories;
 
-
 use Blog\Controller\BlogController;
 use Zend\ServiceManager\FactoryInterface;
 use Zend\ServiceManager\ServiceLocatorInterface;
+use Blog\Services\BlogService;
 
-
+/**
+ * Class ControllerFactory
+ * @package Blog\Factories
+ */
 class ControllerFactory implements FactoryInterface
 {
+    /**
+     * @param ServiceLocatorInterface $serviceLocator
+     * @return BlogController|mixed
+     */
     public function createService(ServiceLocatorInterface $serviceLocator)
     {
-        $serviceLocator=$serviceLocator->getServiceLocator();
-        $blogService=$serviceLocator->get('Blog\Services\NewService');
+        $serviceLocator = $serviceLocator->getServiceLocator();
+        $blogService = $serviceLocator->get(BlogService::class);
+        
         return new BlogController($blogService);
     }
-}
\ No newline at end of file
+}
+
diff --git a/module/Blog/src/Factories/EntityManagerFactory.php b/module/Blog/src/Factories/EntityManagerFactory.php
deleted file mode 100644
index 07b4f45..0000000
--- a/module/Blog/src/Factories/EntityManagerFactory.php
+++ /dev/null
@@ -1,16 +0,0 @@
-<?php
-
-namespace Blog\Factories;
-
-use Zend\ServiceManager\FactoryInterface;
-use Zend\ServiceManager\ServiceLocatorInterface;
-use Blog\Repositories\BlogRepository;
-
-class EntityManagerFactory implements FactoryInterface
-{
-    public function createService(ServiceLocatorInterface $serviceLocator)
-    {
-       $em=$serviceLocator->get('doctrine.entitymanager.orm_default');
-       return new BlogRepository($em);
-    }
-}
\ No newline at end of file
diff --git a/module/Blog/src/Form/BlogForm.php b/module/Blog/src/Form/BlogForm.php
index 126dd18..c77c71c 100644
--- a/module/Blog/src/Form/BlogForm.php
+++ b/module/Blog/src/Form/BlogForm.php
@@ -1,10 +1,14 @@
 <?php
-
+declare(Strict_types=1);
 
 namespace Blog\Form;
 
 use Zend\Form\Form;
 
+/**
+ * Class BlogForm
+ * @package Blog\Form
+ */
 class BlogForm extends Form
 {
     /**
@@ -21,20 +25,17 @@ class BlogForm extends Form
         ]);
 
         $this->add([
-
             'name'=>'title',
             'type'=>'Text',
         ]);
 
          $this->add([
-
              'name'=>'description',
              'type'=>'Zend\Form\Element\Textarea',
              'attributes'=>[
                  'rows'=> 10,
                  'cols'=>100
              ]
-
         ]);
 
         $this->add([
@@ -45,12 +46,6 @@ class BlogForm extends Form
                 'id' => 'submitbutton',
             ]
         ]);
-
-
     }
+}
 
-
-
-
-
-}
\ No newline at end of file
diff --git a/module/Blog/src/Repositories/BlogRepository.php b/module/Blog/src/Repositories/BlogRepository.php
index 6a56a28..fc5346b 100644
--- a/module/Blog/src/Repositories/BlogRepository.php
+++ b/module/Blog/src/Repositories/BlogRepository.php
@@ -1,46 +1,79 @@
 <?php
+declare(strict_types=1);
 
 namespace Blog\Repositories;
 
+use Blog\Entity\Blog;
 use Doctrine\ORM\EntityManager;
 
+/**
+ * Class BlogRepository
+ * @package Blog\Repositories
+ */
 class BlogRepository
 {
-
     protected $em;
 
+    /**
+     * BlogRepository constructor.
+     * @param EntityManager $em
+     */
     public function __construct(EntityManager $em)
     {
         $this->em = $em;
     }
 
-    public function findAllBlogs()
+    /**
+     * @return array
+     */
+    public function findAllBlogs(): array
     {
-        $blogs = $this->em->getRepository('Blog\Entity\Blog')->findAll();
+        $blogs = $this->em->getRepository(Blog::class)->findAll();
+
         return $blogs;
     }
 
-    public function add($blog)
+    /**
+     * @param Blog $blog
+     * @throws \Doctrine\ORM\OptimisticLockException
+     */
+    public function add(Blog $blog)
     {
         $this->em->persist($blog);
+
         $this->em->flush();
     }
 
+    /**
+     * @throws \Doctrine\ORM\OptimisticLockException
+     */
     public function edit()
     {
         $this->em->flush();
     }
 
-    public function findById($id)
+    /**
+     * @param int $id
+     * @return object|null
+     * @throws \Doctrine\ORM\ORMException
+     * @throws \Doctrine\ORM\OptimisticLockException
+     * @throws \Doctrine\ORM\TransactionRequiredException
+     */
+    public function findById(int $id)
     {
+        $blog = $this->em->find(Blog::class, $id);
 
-        $blogs = $this->em->find('Blog\Entity\Blog', $id);
-        return $blogs;
+        return $blog;
     }
 
-    public function delete($blog)
+    /**
+     * @param Blog $blog
+     * @throws \Doctrine\ORM\OptimisticLockException
+     */
+    public function delete(Blog $blog)
     {
         $this->em->remove($blog);
         $this->em->flush();
     }
 }
+
diff --git a/module/Blog/src/Services/BlogService.php b/module/Blog/src/Services/BlogService.php
index 3405099..c7b0c29 100644
--- a/module/Blog/src/Services/BlogService.php
+++ b/module/Blog/src/Services/BlogService.php
@@ -1,45 +1,78 @@
 <?php
+declare(strict_types=1);
 
 namespace Blog\Services;
 
 use Blog\Repositories\BlogRepository;
 use Blog\Contracts\BlogServiceInterface;
+use Blog\Entity\Blog;
 
+/**
+ * Class BlogService
+ * @package Blog\Services
+ */
 class BlogService implements BlogServiceInterface
 {
    protected $blogRepository;
 
+    /**
+     * BlogService constructor.
+     * @param BlogRepository $blogRepository
+     */
    public function __construct(BlogRepository $blogRepository)
    {
       $this->blogRepository = $blogRepository;
    }
 
-   public function findAllBlogs()
+    /**
+     * @return array
+     */
+   public function findAllBlogs():array
    {
       return $this->blogRepository->findAllBlogs();
    }
 
-   public function add($blog)
+    /**
+     * @param Blog $blog
+     * @return mixed|void
+     * @throws \Doctrine\ORM\OptimisticLockException
+     */
+   public function add(Blog $blog)
    {
-      return $this->blogRepository->add($blog);
+       $this->blogRepository->add($blog);
    }
 
+    /**
+     * @return mixed|void
+     * @throws \Doctrine\ORM\OptimisticLockException
+     */
    public function edit()
    {
       $this->blogRepository->edit();
    }
 
-   public function delete($blog)
+    /**
+     * @param Blog $blog
+     * @return mixed|void
+     * @throws \Doctrine\ORM\OptimisticLockException
+     */
+   public function delete(Blog $blog)
    {
       $this->blogRepository->delete($blog);
    }
 
-   public function findById($id)
+    /**
+     * @param int $id
+     * @return Blog
+     * @throws \Doctrine\ORM\ORMException
+     * @throws \Doctrine\ORM\OptimisticLockException
+     * @throws \Doctrine\ORM\TransactionRequiredException
+     */
+   public function findById(int $id):Blog
    {
-      $blogs = $this->blogRepository->findById($id);
-      return $blogs;
-   }
-
-
+      $blog = $this->blogRepository->findById($id);
 
+      return $blog;
+   }
 }
+
diff --git a/module/Blog/src/Services/NewService.php b/module/Blog/src/Services/NewService.php
deleted file mode 100644
index 0d5e808..0000000
--- a/module/Blog/src/Services/NewService.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-
-namespace Blog\Services;
-
-use Blog\Contracts\BlogServiceInterface;
-
-class NewService implements BlogServiceInterface {
-
-    public function findAllBlogs(){
-             die('hello');
-    }
-
-    public function add($blog){
-
-    }
-
-    public function edit()
-    {
-
-    }
-
-    public function delete($blog){
-
-    }
-
-    public function findById($id)
-    {
-
-    }
-}
\ No newline at end of file
diff --git a/module/Blog/view/blog/blog/add.phtml b/module/Blog/view/blog/blog/add.phtml
index f73a07d..f55ac24 100644
--- a/module/Blog/view/blog/blog/add.phtml
+++ b/module/Blog/view/blog/blog/add.phtml
@@ -4,7 +4,7 @@ $this->headTitle($title);
 ?>
 
 <?php
-$form->setAttribute('action', $this->url('blog', array('action' => 'add')));
+$form->setAttribute('action', $this->url('blog/default', array('action' => 'add')));
 $form->prepare();
 ?>
 
@@ -15,11 +15,12 @@ echo $this->formHidden($form->get('id'));
 
 <?php echo $this->formHidden($form->get('id')); ?>
 
-<h5>Title : </h5><?php echo $this->formRow($form->get('title')); ?>
+    <h5>Title : </h5><?php echo $this->formRow($form->get('title')); ?>
 
-<h5>Description : </h5><?php echo $this->formRow($form->get('description')); ?>
-<br>
-<br>
+    <h5>Description : </h5><?php echo $this->formRow($form->get('description')); ?>
+    <br>
+    <br>
 <?php echo $this->formSubmit($form->get('submit')); ?>
 
-<?php echo $this->form()->closeTag(); ?>
\ No newline at end of file
+<?php echo $this->form()->closeTag(); ?>
+
diff --git a/module/Blog/view/blog/blog/delete.phtml b/module/Blog/view/blog/blog/delete.phtml
index d66eb12..fe1d697 100644
--- a/module/Blog/view/blog/blog/delete.phtml
+++ b/module/Blog/view/blog/blog/delete.phtml
@@ -14,4 +14,5 @@ $url = $this->url('blog/default', array('action' => 'delete', 'id' => $this->id,
         <input type="submit" name="del" value="Yes" />
         <input type="submit" name="del" value="No" />
     </div>
-</form>
\ No newline at end of file
+</form>
+
diff --git a/module/Blog/view/blog/blog/edit.phtml b/module/Blog/view/blog/blog/edit.phtml
index 6873420..13621cc 100644
--- a/module/Blog/view/blog/blog/edit.phtml
+++ b/module/Blog/view/blog/blog/edit.phtml
@@ -2,32 +2,23 @@
 $title = 'Edit Your Blog';
 $this->headTitle($title);
 ?>
-<h1><?php echo $this->escapeHtml($title); ?></h1>
+    <h1><?php echo $this->escapeHtml($title); ?></h1>
 <?php
 
 $form = $this->form;
-$form->setAttribute('action', $this->url(
-    'blog',
-    array(
-        'action' => 'edit',
-        'id'     => $this->id,
-    )
-
-));
+$form->setAttribute('action', $this->url('blog/default', array('action' => 'edit', 'id' => $this->id,)));
 $form->prepare();
 
 echo $this->form()->openTag($form);
 
 ?>
-
 <?php echo $this->formHidden($form->get('id')); ?>
+    <h5>Title : </h5><?php echo $this->formRow($form->get('title')); ?>
+    <h5>Description : </h5><?php echo $this->formRow($form->get('description')); ?>
+    <br>
+    <br>
+<?php
+echo $this->formSubmit($form->get('submit'));
+echo $this->form()->closeTag();
+?>
 
-<h5>Title : </h5><?php echo $this->formRow($form->get('title')); ?>
-
-<h5>Description : </h5><?php echo $this->formRow($form->get('description')); ?>
-<br>
-<br>
-<?php echo $this->formSubmit($form->get('submit')); ?>
-
-
-<?php echo $this->form()->closeTag(); ?>    
\ No newline at end of file
diff --git a/module/Blog/view/blog/blog/index.phtml b/module/Blog/view/blog/blog/index.phtml
index a542939..d98e51f 100644
--- a/module/Blog/view/blog/blog/index.phtml
+++ b/module/Blog/view/blog/blog/index.phtml
@@ -5,26 +5,20 @@ $this->headTitle($title);
 ?>
 <h1><?php echo $this->escapeHtml($title); ?></h1>
 <p>
-    <a href="<?php echo $this->url('blog', array('action' => 'add')); ?>">Create A New Blog</a>
+    <a href="<?php echo $this->url('blog/default', array('action' => 'add')); ?>">Create A New Blog</a>
 </p>
-
-
-
 <?php foreach ($blogs as $blog) : ?>
 
-    <h5 class="card-header"><?php echo $this->escapeHtml($blog->getTitle()); ?></h5>
-
-    <div class="card">
+<h5 class="card-header"><?php echo $this->escapeHtml($blog->getTitle()); ?></h5>
+<div class="card">
         <?php echo $this->escapeHtml($blog->getDescription()); ?>
-    </div>
-
-    <br>
-
-    <a href="<?php echo $this->url('blog', array('action' => 'edit', 'id' => $blog->getId())); ?>">Edit</a>
-    &nbsp;
-    <a href="<?php echo $this->url('blog', array('action' => 'delete', 'id' => $blog->getId())); ?>">Delete</a>
+</div>
+<br>
+<a href="<?php echo $this->url('blog/default', array('action' => 'edit', 'id' => $blog->getId())); ?>">Edit</a>
+&nbsp;
+<a href="<?php echo $this->url('blog/default', array('action' => 'delete', 'id' => $blog->getId())); ?>">Delete</a>
+<br>
+<br>
 
-    <br>
-    <br>
+<?php endforeach; ?>
 
-<?php endforeach; ?>
\ No newline at end of file
diff --git a/module/Blog/view/blog/new/index1.phtml b/module/Blog/view/blog/new/index1.phtml
deleted file mode 100644
index 8b13789..0000000
--- a/module/Blog/view/blog/new/index1.phtml
+++ /dev/null
@@ -1 +0,0 @@
-
diff --git a/public/index.php b/public/index.php
index 1828853..b1603f9 100755
--- a/public/index.php
+++ b/public/index.php
@@ -1,7 +1,8 @@
 <?php
 
-define('REQUEST_MICROTIME', microtime(true));
-
+error_reporting(E_ALL);
+error_reporting(E_ALL|E_STRICT);
+ini_set('display_errors', 'on');
 
 /**
  * This makes our life easier when dealing with paths. Everything is relative
